@page "/"
@using DuerstCharging.Core.Charging
@using System.Collections.Immutable
@inject IChargingNetwork chargingNetwork;

<PageTitle>Home</PageTitle>

<h1>Welcome to Duerst-Charing</h1>

<h3>System State</h3>
<ul>
    <li>App: <span class="badge rounded-pill bg-success">Running</span></li>
    <li>Web UI: <span class="badge rounded-pill bg-success">Running</span></li>
</ul>

<h3>Charging Stations:</h3>
@if (chargingStations != null)
{
    <div>
        @foreach (var station in chargingStations)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">
                        <div class="float-start me-2">
                            @if (station.IsEnabled)
                            {
                                <span class="badge rounded-pill bg-success">Enabled</span>
                            }
                            else
                            {
                                <span class="badge rounded-pill bg-info text-dark">Disabled</span>
                            }
                        </div>
                        <span>@station.IpAddress</span>
                    </h5>
                    <small class="card-subtitle mb-2 text-body-secondary text-sm-start text-secondary">
                        Updated: @station.LastSuccessfulRetrieve.ToString("G")
                    </small>
                    <div class="card-text pt-3">
                        <div class="list-group">
                            <div class="list-group-item">
                                <div class="fw-bold">Cable state</div>
                                <div>@FormatCableState(station.CableState)</div>
                            </div>
                            <div class="list-group-item">
                                <div class="fw-bold">Charging state</div>
                                <div>@FormatChargingState(station.ChargingState)</div>
                            </div>
                            @if (station.ErrorCode != 0)
                            {
                                <div class="list-group-item list-group-item-danger">
                                    <div class="fw-bold">Charging state:</div>
                                    <div>@station.ErrorCode</div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="spinner-grow text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}

@code {
    private ImmutableArray<IChargingStation> chargingStations;

    protected override async Task OnInitializedAsync()
    {
        chargingStations = await chargingNetwork.GetAllChargingStations();
        await base.OnInitializedAsync();
    }

    private string FormatCableState(CableState cableState)
        => cableState switch
        {
            CableState.NoCable => "No cable",
            CableState.CablePluggedToChargingStation => "Cable plugged to charging station",
            CableState.CablePluggedToChargingStationAndLocked => "Cable plugged to charging station and locked",
            CableState.CablePluggedNotCharging => "Cable plugged, not charging",
            CableState.CablePluggedAndCharging => "Cable plugged and charging",
            _ => "Unknown"
        };

    private string FormatChargingState(ChargingState chargingState)
        => chargingState switch
        {
            ChargingState.Starting => "Starting",
            ChargingState.UnpluggedOrLocked => "Unplugged or locked",
            ChargingState.PluggedInAndWaitingForCar => "Plugged in and waiting for car",
            ChargingState.Charging => "Charging",
            ChargingState.Error => "Error",
            ChargingState.Suspended => "Suspended",
            _ => "Unknown"
        };

}